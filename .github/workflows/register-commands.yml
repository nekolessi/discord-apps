name: Register Discord Commands

on:
  workflow_dispatch:
    inputs:
      scope:
        description: "Where to register commands"
        required: true
        default: "guild"
        type: choice
        options: [guild, global]

permissions:
  contents: read  # minimum needed to checkout code, fetch dependencies, etc.
  # OPTIONAL elevated writes â€” uncomment ONLY if the job truly needs them (principle of least privilege):
  # pull-requests: write  # e.g., annotate PRs, post review comments, update labels
  # issues: write         # e.g., create/update issues


jobs:
  register:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      # Use pnpm version from package.json (packageManager)
      - name: Setup PNPM
        uses: pnpm/action-setup@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install
        run: pnpm install --frozen-lockfile

      # Map credentials from Secrets first, then fall back to Repository Variables
      - name: Register commands
        env:
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN || vars.DISCORD_TOKEN }}
          DISCORD_CLIENT_ID: ${{ secrets.DISCORD_CLIENT_ID || vars.DISCORD_CLIENT_ID }}
          DISCORD_GUILD_ID: ${{ secrets.DISCORD_GUILD_ID || vars.DISCORD_GUILD_ID }}
          SCOPE: ${{ github.event.inputs.scope }}
        run: |
          set -euo pipefail

          # Validate env (print friendly errors, avoid leaking values)
          missing=0
          for k in DISCORD_TOKEN DISCORD_CLIENT_ID; do
            if [ -z "${!k:-}" ]; then
              echo "::error title=Missing $k::Set $k in GitHub > Settings > Secrets and variables"
              missing=1
            fi
          done
          if [ "${SCOPE}" = "guild" ] && [ -z "${DISCORD_GUILD_ID:-}" ]; then
            echo "::error title=Missing DISCORD_GUILD_ID::Required when scope is 'guild'"
            missing=1
          fi
          if [ "$missing" -ne 0 ]; then
            exit 1
          fi

          echo "Registering commands for scope: ${SCOPE}"

          # If your package.json scripts are patched to use root register.ts:
          if [ "${SCOPE}" = "global" ]; then
            pnpm run register:global
          else
            pnpm run register:guild
          fi
